# ReceiverSender manifest file for Gramine SGX

libos.entrypoint = "/ReceiverSender"
loader.log_level = "{{ log_level }}"

loader.env.LD_LIBRARY_PATH = "/lib:/lib64:/usr/lib:/usr/lib/x86_64-linux-gnu"

# Pass the integer command-line argument
loader.argv = [ "/ReceiverSender", "{{ num_senders }}" ]

fs.mounts = [
  { path = "/lib", uri = "file:{{ gramine.runtimedir() }}" },
  { path = "/ReceiverSender", uri = "file:build/ReceiverSender" },
  { path = "/usr/lib/x86_64-linux-gnu", uri = "file:/usr/lib/x86_64-linux-gnu" },
  { path = "/usr/lib/x86_64-linux-gnu/libcrypto.so.3", uri = "file:/usr/lib/x86_64-linux-gnu/libcrypto.so.3" },
  { path = "/usr/lib/x86_64-linux-gnu/libssl.so.3", uri = "file:/usr/lib/x86_64-linux-gnu/libssl.so.3" },
  { path = "/result", uri = "file:./result", type = "chroot" } 
]

sgx.debug = false
sgx.edmm_enable = {{ 'true' if env.get('EDMM', '0') == '1' else 'false' }}

# Profiling flags
#sgx.debug = true
#sgx.enable_stats = true
#sgx.profile.enable = "all"
#sgx.profile.with_stack = true

sgx.trusted_files = [
  "file:build/ReceiverSender",
  "file:{{ gramine.runtimedir() }}/",
  "file:./enc_receiver_query/receiver_set.enc",
  "file:./sender_db/",
  "file:./aes_keys/",
  "file:/usr/lib/x86_64-linux-gnu/libstdc++.so.6",
  "file:/usr/lib/x86_64-linux-gnu/libgcc_s.so.1",
  "file:/usr/lib/x86_64-linux-gnu/libcrypto.so.3",
  "file:/usr/lib/x86_64-linux-gnu/libssl.so.3"
]

sgx.allowed_files = [
  "file:./result/"
]